TO SHIP
[ ] HYCD Landing Page
[ ] A/B Testing
[ ] CD Laddering
[ ] Stock Price Information

TO DO (in support of shipping)
[ ] create a stand-alone demo page for the HYCD landing page
[ ] build the HYCD landing template
[ ] build script that includes the HYCD chart and its dependencies
[ ] implement the HYCD chart on the actual page








NOT TO DO (yet)
- fix issues in templates that aren't shipping
- add some built in templates mapped to strings
- tag version 0.5 and start stripping away all the cruft
- rewrite the documentation
- extract a chart object from the jQuery UI component (layerConext)

















DON'T EVEN THINK ABOUT IT

I can play around with different APIs for the framework later.
The API for templates is defined. The context with which a template
is called is where the real API lives. The framework is just gluing
templates together.

chart = orthagonal.chart(targetElement, { /* spec */});
chart.print(template, {/* spec */})

Extracting the orthagonal.chart() object is the last thing that needs
to happen. I need the API for templates to be solidified. Then it
doesn't matter if I rewrite the entire framework.

As far as the template API goes, there are no longer arguments. It's
just a question of what belongs to this and what belongs to this.spec.

If I want to keep data separate from the spec, I could just do:

chart = orthagonal.chart(targetElement, data, { /* spec */});
chart.print(template, {/* spec */})
